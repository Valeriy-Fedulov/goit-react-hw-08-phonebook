{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/contactform/ContactForm.js","components/filter/Filter.js","components/contact/Contact.js","components/contactlist/ContactList.js","views/ContactsView.js"],"names":["contactsOperations","fetchContacts","dispatch","a","fetchContactsRequest","axios","get","data","fetchContactsSuccess","fetchContactsError","addContact","contact","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","message","deleteContact","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getItems","state","contacts","items","getFilter","filter","contactsSelectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","useDispatch","Box","component","sx","m","width","display","justifyContent","padding","textAlign","noValidate","autoComplete","onSubmit","e","preventDefault","find","alert","Paper","elevation","TextField","label","type","pattern","title","required","value","onChange","currentTarget","Button","variant","endIcon","Filter","margin","setFilter","Contact","isLoading","useEffect","color","height","map","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","startIcon","onClick","Divider","ContactList","List","Contacts"],"mappings":"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","file":"static/js/ContactsView.23783d9a.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\nconst fetchContacts = () => async dispatch => {\n  dispatch(fetchContactsRequest());\n\n  try {\n    const { data } = await axios.get('/contacts');\n\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error));\n  }\n};\n\nconst addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\nconst contactsOperations = {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n\nexport default contactsOperations;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getLoading = state => state.contacts.loading;\n\nconst getItems = state => state.contacts.items;\n\nconst getFilter = state => state.contacts.filter;\n\nconst getVisibleContacts = createSelector(\n  [getItems, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nconst contactsSelectors = {\n  getLoading,\n  getItems,\n  getFilter,\n  getVisibleContacts,\n};\n\nexport default contactsSelectors;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport { contactsSelectors } from '../../redux/contacts';\n\nimport Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const items = useSelector(contactsSelectors.getItems);\n  const dispatch = useDispatch();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (items.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(contactsOperations.addContact({ name, number }));\n      reset();\n    }\n  }\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { m: 1, width: '100%' },\n        display: 'flex',\n        justifyContent: 'center',\n\n        '& > :not(style)': {\n          m: 1,\n          padding: '30px',\n          textAlign: 'center',\n        },\n      }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit}\n    >\n      <Paper elevation={3}>\n        <label>\n          <TextField\n            label=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={e => {\n              setName(e.currentTarget.value);\n            }}\n          />\n        </label>\n        <label>\n          <TextField\n            label=\"Phone\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={e => {\n              setNumber(e.currentTarget.value);\n            }}\n          />\n        </label>\n        <Button variant=\"contained\" endIcon={<SendIcon />} type=\"submit\">\n          Add contact\n        </Button>\n      </Paper>\n    </Box>\n  );\n}\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts';\nimport { contactsSelectors } from '../../redux/contacts';\n\nimport TextField from '@mui/material/TextField';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\nexport default function Filter() {\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& .MuiTextField-root': { width: '600px', padding: '0', margin: '0' },\n        display: 'flex',\n        justifyContent: 'center',\n      }}\n    >\n      <Paper elevation={3}>\n        <TextField\n          label=\"Find contacts by name\"\n          type=\"text\"\n          name=\"filter\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={filter}\n          onChange={e => dispatch(setFilter(e.currentTarget.value))}\n        />\n      </Paper>\n    </Box>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport ReactLoading from 'react-loading';\nimport { contactsSelectors } from '../../redux/contacts';\nimport { contactsOperations } from '../../redux/contacts';\n\nimport Button from '@mui/material/Button';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ListItem from '@mui/material/ListItem';\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\nimport Avatar from '@mui/material/Avatar';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\nimport ListItemText from '@mui/material/ListItemText';\nimport Divider from '@mui/material/Divider';\nimport Paper from '@mui/material/Paper';\nimport Box from '@mui/material/Box';\n\nexport default function Contact() {\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\n  const isLoading = useSelector(contactsSelectors.getLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      sx={{\n        '& > :not(style)': {\n          m: 0.5,\n        },\n        width: '500px',\n      }}\n    >\n      {isLoading && (\n        <ReactLoading type=\"bars\" color=\"black\" height={167} width={75} />\n      )}\n      {contacts.map(contact => (\n        <Paper key={contact.id} elevation={3}>\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar>\n                <ContactPhoneIcon />\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText primary={contact.name} secondary={contact.number} />\n            <Button\n              variant=\"contained\"\n              startIcon={<DeleteIcon />}\n              type=\"button\"\n              onClick={() =>\n                dispatch(contactsOperations.deleteContact(contact.id))\n              }\n            >\n              Delete\n            </Button>\n          </ListItem>\n          <Divider variant=\"inset\" component=\"li\" />\n        </Paper>\n      ))}\n    </Box>\n  );\n}\n","import React from 'react';\nimport Contact from '../contact';\n\nimport List from '@mui/material/List';\n\nconst ContactList = () => (\n  <List\n    sx={{\n      display: 'flex',\n      justifyContent: 'center',\n    }}\n  >\n    <Contact />\n  </List>\n);\n\nexport default ContactList;\n","import React from 'react';\nimport ContactForm from '../components/contactform';\nimport Filter from '../components/filter/Filter';\nimport ContactList from '../components/contactlist/ContactList';\n\nimport Box from '@mui/material/Box';\n\nconst Contacts = () => (\n  <Box\n    sx={{\n      textAlign: 'center',\n    }}\n  >\n    <h2>Phonebook</h2>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n    <ContactList />\n  </Box>\n);\n\nexport default Contacts;\n"],"sourceRoot":""}